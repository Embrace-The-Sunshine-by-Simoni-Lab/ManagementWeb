{"ast":null,"code":"import _objectSpread from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/Drag&Drop/TwoListDnD.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, useTheme } from '@mui/system';\nimport { themeShadows } from 'app/components/MatxTheme/themeColors';\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { convertHexToRGB } from 'app/utils/utils'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar getItems = function getItems(count) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k + offset),\n      content: \"item \".concat(k + offset)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\r\n * Moves an item from one list to another list.\r\n */\n\n\nvar move = function move(source, destination, droppableSource, droppableDestination) {\n  var sourceClone = Array.from(source);\n  var destClone = Array.from(destination);\n\n  var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n      _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n      removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  var result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle, palette) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    boxShadow: themeShadows[4],\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? \"rgba(\".concat(convertHexToRGB(palette.background.default), \",1)\") : \"rgba(\".concat(convertHexToRGB(palette.background.paper), \",1)\")\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver, palette) {\n  return {\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : \"rgba(\".concat(convertHexToRGB(palette.background.default), \",1)\"),\n    padding: grid,\n    width: 250\n  };\n};\n\nvar TwoListDnD = function TwoListDnD() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  useEffect(function () {\n    setItems(getItems(10));\n    setSelected(getItems(5, 10));\n  }, []);\n\n  var getList = function getList(id) {\n    return id === 'droppable' ? items : selected;\n  };\n\n  var onDragEnd = function onDragEnd(result) {\n    var source = result.source,\n        destination = result.destination; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      var _items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      if (source.droppableId === 'droppable2') {\n        setSelected(_items);\n      } else setItems(_items);\n    } else {\n      var _result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n\n      setItems(_result.droppable);\n      setSelected(_result.droppable2);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable\",\n        children: function children(provided, snapshot) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            style: getListStyle(snapshot.isDraggingOver, palette),\n            children: [items.map(function (item, index) {\n              return /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: item.id,\n                index: index,\n                children: function children(provided, snapshot) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n                    ref: provided.innerRef\n                  }, provided.draggableProps), provided.dragHandleProps), {}, {\n                    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, palette),\n                    children: item.content\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 41\n                  }, _this);\n                }\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, _this);\n            }), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"droppable2\",\n        children: function children(provided, snapshot) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            style: getListStyle(snapshot.isDraggingOver, palette),\n            children: [selected.map(function (item, index) {\n              return /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: item.id,\n                index: index,\n                children: function children(provided, snapshot) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n                    ref: provided.innerRef\n                  }, provided.draggableProps), provided.dragHandleProps), {}, {\n                    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, palette),\n                    children: item.content\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 41\n                  }, _this);\n                }\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, _this);\n            }), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TwoListDnD, \"DgfL/4JHtYvD0AzB9wDFbQdbT6A=\", false, function () {\n  return [useTheme];\n});\n\n_c = TwoListDnD;\nexport default TwoListDnD;\n\nvar _c;\n\n$RefreshReg$(_c, \"TwoListDnD\");","map":{"version":3,"sources":["/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/Drag&Drop/TwoListDnD.jsx"],"names":["Box","useTheme","themeShadows","React","useState","useEffect","DragDropContext","Droppable","Draggable","convertHexToRGB","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","palette","userSelect","padding","margin","boxShadow","borderRadius","background","default","paper","getListStyle","isDraggingOver","width","TwoListDnD","items","setItems","selected","setSelected","getList","onDragEnd","droppable","droppable2","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import { Box, useTheme } from '@mui/system'\r\nimport { themeShadows } from 'app/components/MatxTheme/themeColors'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { convertHexToRGB } from 'app/utils/utils'\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source)\r\n    const destClone = Array.from(destination)\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed)\r\n\r\n    const result = {}\r\n    result[droppableSource.droppableId] = sourceClone\r\n    result[droppableDestination.droppableId] = destClone\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    boxShadow: themeShadows[4],\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging\r\n        ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n        : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver\r\n        ? 'rgba(0,0,0, .1)'\r\n        : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n    padding: grid,\r\n    width: 250,\r\n})\r\n\r\nconst TwoListDnD = () => {\r\n    const [items, setItems] = useState([])\r\n    const [selected, setSelected] = useState([])\r\n    const { palette } = useTheme()\r\n\r\n    useEffect(() => {\r\n        setItems(getItems(10))\r\n        setSelected(getItems(5, 10))\r\n    }, [])\r\n\r\n    const getList = (id) => (id === 'droppable' ? items : selected)\r\n\r\n    const onDragEnd = (result) => {\r\n        const { source, destination } = result\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            )\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                setSelected(items)\r\n            } else setItems(items)\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            )\r\n\r\n            setItems(result.droppable)\r\n            setSelected(result.droppable2)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Box display=\"flex\" justifyContent=\"space-around\">\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(\r\n                                snapshot.isDraggingOver,\r\n                                palette\r\n                            )}\r\n                        >\r\n                            {items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                palette\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(\r\n                                snapshot.isDraggingOver,\r\n                                palette\r\n                            )}\r\n                        >\r\n                            {selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                palette\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </Box>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default TwoListDnD\r\n"]},"metadata":{},"sourceType":"module"}