{"ast":null,"code":"import _objectSpread from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/Drag&Drop/SimpleListDnD.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useTheme } from '@mui/system';\nimport { themeShadows } from 'app/components/MatxTheme/themeColors';\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { convertHexToRGB } from 'app/utils/utils'; // fake data generator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar getItems = function getItems(count) {\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k),\n      content: \"item \".concat(k)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar grid = 8; // const getItemStyle = (isDragging, draggableStyle) => ({\n//     // some basic styles to make the items look a bit nicer\n//     userSelect: 'none',\n//     padding: grid * 2,\n//     margin: `0 0 ${grid}px 0`,\n//     boxShadow: 'var(--elevation-z4)',\n//     borderRadius: '4px',\n//     // change background colour if dragging\n//     background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\n//     // styles we need to apply on draggables\n//     ...draggableStyle,\n// })\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle, palette) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    boxShadow: themeShadows[4],\n    borderRadius: '4px',\n    // change background colour if dragging\n    background: isDragging ? \"rgba(\".concat(convertHexToRGB(palette.background.default), \",1)\") : \"rgba(\".concat(convertHexToRGB(palette.background.paper), \",1)\")\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver, palette) {\n  return {\n    borderRadius: '4px',\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : \"rgba(\".concat(convertHexToRGB(palette.background.default), \",1)\"),\n    padding: grid,\n    width: 250\n  };\n};\n\nvar SimpleListDnD = function SimpleListDnD() {\n  _s();\n\n  var _useTheme = useTheme(),\n      palette = _useTheme.palette;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      item = _useState2[0],\n      setItem = _useState2[1];\n\n  useEffect(function () {\n    setItem(getItems(6));\n  }, []);\n\n  var onDragEnd = function onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    var tempItems = reorder(item, result.source.index, result.destination.index);\n    setItem(tempItems);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"droppable\",\n      children: function children(provided, snapshot) {\n        return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, provided.droppableProps), {}, {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver, palette),\n          children: [item.map(function (item, index) {\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: index,\n              children: function children(provided, snapshot) {\n                return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n                  ref: provided.innerRef\n                }, provided.draggableProps), provided.dragHandleProps), {}, {\n                  style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, palette),\n                  children: item.content\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 37\n                }, _this);\n              }\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, _this);\n          }), provided.placeholder]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(SimpleListDnD, \"FKWQoe3Uc3q6v143zzqB1Hk3C9I=\", false, function () {\n  return [useTheme];\n});\n\n_c = SimpleListDnD;\nexport default SimpleListDnD;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleListDnD\");","map":{"version":3,"sources":["/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/Drag&Drop/SimpleListDnD.jsx"],"names":["useTheme","themeShadows","React","useState","useEffect","DragDropContext","Droppable","Draggable","convertHexToRGB","getItems","count","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","grid","getItemStyle","isDragging","draggableStyle","palette","userSelect","padding","margin","boxShadow","borderRadius","background","default","paper","getListStyle","isDraggingOver","width","SimpleListDnD","item","setItem","onDragEnd","destination","tempItems","source","index","provided","snapshot","droppableProps","innerRef","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import { useTheme } from '@mui/system'\r\nimport { themeShadows } from 'app/components/MatxTheme/themeColors'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { convertHexToRGB } from 'app/utils/utils'\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k}`,\r\n        content: `item ${k}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\n// const getItemStyle = (isDragging, draggableStyle) => ({\r\n//     // some basic styles to make the items look a bit nicer\r\n//     userSelect: 'none',\r\n//     padding: grid * 2,\r\n//     margin: `0 0 ${grid}px 0`,\r\n//     boxShadow: 'var(--elevation-z4)',\r\n//     borderRadius: '4px',\r\n//     // change background colour if dragging\r\n//     background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\r\n\r\n//     // styles we need to apply on draggables\r\n//     ...draggableStyle,\r\n// })\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, palette) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    boxShadow: themeShadows[4],\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging\r\n        ? `rgba(${convertHexToRGB(palette.background.default)},1)`\r\n        : `rgba(${convertHexToRGB(palette.background.paper)},1)`,\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver, palette) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver\r\n        ? 'rgba(0,0,0, .1)'\r\n        : `rgba(${convertHexToRGB(palette.background.default)},1)`,\r\n    padding: grid,\r\n    width: 250,\r\n})\r\n\r\nconst SimpleListDnD = () => {\r\n    const { palette } = useTheme()\r\n\r\n    const [item, setItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        setItem(getItems(6))\r\n    }, [])\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n\r\n        const tempItems = reorder(\r\n            item,\r\n            result.source.index,\r\n            result.destination.index\r\n        )\r\n        setItem(tempItems)\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={getListStyle(snapshot.isDraggingOver, palette)}\r\n                    >\r\n                        {item.map((item, index) => (\r\n                            <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                            >\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={getItemStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style,\r\n                                            palette\r\n                                        )}\r\n                                    >\r\n                                        {item.content}\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default SimpleListDnD\r\n"]},"metadata":{},"sourceType":"module"}