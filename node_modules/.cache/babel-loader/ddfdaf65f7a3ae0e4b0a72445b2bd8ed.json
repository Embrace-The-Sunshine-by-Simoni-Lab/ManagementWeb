{"ast":null,"code":"import _objectWithoutProperties from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _excluded = [\"action\"];\n\nvar _jsxFileName = \"/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/calendar/MatxCalendar.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@mui/material';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport CalendarHeader from './CalendarHeader';\nimport * as ReactDOM from 'react-dom';\nimport { getAllEvents, updateEvent } from './CalendarService';\nimport EventEditorDialog from './EventEditorDialog';\nimport { Box, styled } from '@mui/system';\nimport moment from 'moment';\nimport { convertHexToRGB } from 'app/utils/utils';\nimport Breadcrumb from 'app/components/Breadcrumb/Breadcrumb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Container = styled('div')(function (_ref) {\n  var _ref2;\n\n  var theme = _ref.theme;\n  return _ref2 = {\n    margin: '30px'\n  }, _defineProperty(_ref2, theme.breakpoints.down('sm'), {\n    margin: '16px'\n  }), _defineProperty(_ref2, '& .breadcrumb', _defineProperty({\n    margin: '30px'\n  }, theme.breakpoints.down('sm'), {\n    margin: '16px'\n  })), _ref2;\n});\nvar CalendarRoot = styled('div')(function (_ref3) {\n  var theme = _ref3.theme;\n  return {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    '& .rbc-event': {\n      background: \"rgba(\".concat(convertHexToRGB(theme.palette.primary.main), \",1)\")\n    },\n    '& .rbc-selected': {\n      background: \"rgba(\".concat(convertHexToRGB(theme.palette.secondary.main), \",1)\")\n    },\n    '& .rbc-calendar': {\n      height: 'auto',\n      flexGrow: 1\n    },\n    '& .rbc-header': {\n      padding: '12px 16px !important',\n      '& a': {\n        paddingBottom: '8px !important'\n      },\n      '& span': {\n        fontSize: '15px !important',\n        fontWeight: 500\n      }\n    }\n  };\n});\nvar localizer = momentLocalizer(moment);\nvar DragAndDropCalendar = withDragAndDrop(Calendar);\n_c = DragAndDropCalendar;\nvar viewList = Object.keys(Views).map(function (key) {\n  return Views[key];\n});\n\nvar MatxCalendar = function MatxCalendar() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newEvent = _useState4[0],\n      setNewEvent = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      shouldShowEventDialog = _useState6[0],\n      setShouldShowEventDialog = _useState6[1];\n\n  var headerComponentRef = useRef(null);\n\n  var updateCalendar = function updateCalendar() {\n    getAllEvents().then(function (res) {\n      return res.data;\n    }).then(function (events) {\n      var _events;\n\n      events = (_events = events) === null || _events === void 0 ? void 0 : _events.map(function (e) {\n        return _objectSpread(_objectSpread({}, e), {}, {\n          start: new Date(e.start),\n          end: new Date(e.end)\n        });\n      });\n      setEvents(events);\n    });\n  };\n\n  var handleDialogClose = function handleDialogClose() {\n    setShouldShowEventDialog(false);\n    updateCalendar();\n  };\n\n  var handleEventMove = function handleEventMove(event) {\n    handleEventResize(event);\n  };\n\n  var handleEventResize = function handleEventResize(event) {\n    updateEvent(event).then(function () {\n      updateCalendar();\n    });\n  };\n\n  var openNewEventDialog = function openNewEventDialog(_ref4) {\n    var action = _ref4.action,\n        event = _objectWithoutProperties(_ref4, _excluded);\n\n    if (action === 'doubleClick') {\n      setNewEvent(event);\n      setShouldShowEventDialog(true);\n    }\n  };\n\n  var openExistingEventDialog = function openExistingEventDialog(event) {\n    setNewEvent(event);\n    setShouldShowEventDialog(true);\n  };\n\n  useEffect(function () {\n    updateCalendar();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"breadcrumb\",\n      children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n        routeSegments: [{\n          name: 'Calendar'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: {\n        mb: 2\n      },\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: function onClick() {\n        return openNewEventDialog({\n          action: 'doubleClick',\n          start: new Date(),\n          end: new Date()\n        });\n      },\n      children: \"Add Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(CalendarRoot, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        ref: headerComponentRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(DragAndDropCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: events,\n        onEventDrop: handleEventMove,\n        resizable: true,\n        onEventResize: handleEventResize,\n        defaultView: Views.MONTH,\n        defaultDate: new Date(),\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        views: viewList,\n        step: 60,\n        showMultiDayTimes: true,\n        components: {\n          toolbar: function toolbar(props) {\n            return headerComponentRef.current ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(CalendarHeader, _objectSpread({}, props), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 37\n            }, _this), headerComponentRef.current) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Header component not found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, _this);\n          }\n        } // onNavigate={handleNavigate}\n        ,\n        onSelectEvent: function onSelectEvent(event) {\n          openExistingEventDialog(event);\n        },\n        onSelectSlot: function onSelectSlot(slotDetails) {\n          return openNewEventDialog(slotDetails);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, _this), shouldShowEventDialog && /*#__PURE__*/_jsxDEV(EventEditorDialog, {\n      handleClose: handleDialogClose,\n      open: shouldShowEventDialog,\n      event: newEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(MatxCalendar, \"AVJeWxhNrwd6XYDAlZsS+AWFAOs=\");\n\n_c2 = MatxCalendar;\nexport default MatxCalendar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DragAndDropCalendar\");\n$RefreshReg$(_c2, \"MatxCalendar\");","map":{"version":3,"sources":["/Users/zhaoyuliu/Desktop/matx-pro-3.3.0/src/app/views/calendar/MatxCalendar.jsx"],"names":["React","useState","useEffect","useRef","Button","Calendar","Views","momentLocalizer","withDragAndDrop","CalendarHeader","ReactDOM","getAllEvents","updateEvent","EventEditorDialog","Box","styled","moment","convertHexToRGB","Breadcrumb","Container","theme","margin","breakpoints","down","CalendarRoot","height","display","flexDirection","background","palette","primary","main","secondary","flexGrow","padding","paddingBottom","fontSize","fontWeight","localizer","DragAndDropCalendar","viewList","Object","keys","map","key","MatxCalendar","events","setEvents","newEvent","setNewEvent","shouldShowEventDialog","setShouldShowEventDialog","headerComponentRef","updateCalendar","then","res","data","e","start","Date","end","handleDialogClose","handleEventMove","event","handleEventResize","openNewEventDialog","action","openExistingEventDialog","name","mb","MONTH","toolbar","props","current","createPortal","slotDetails"],"mappings":";;;;;;;;;;AAAA,OAAO,mDAAP;AACA,OAAO,sDAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,eAA1B,QAAiD,oBAAjD;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,mBAA1C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,OAAOC,UAAP,MAAuB,sCAAvB;;AAEA,IAAMC,SAAS,GAAGJ,MAAM,CAAC,KAAD,CAAN,CAAc;AAAA;;AAAA,MAAGK,KAAH,QAAGA,KAAH;AAAA;AAC5BC,IAAAA,MAAM,EAAE;AADoB,4BAE3BD,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAF2B,EAEI;AAC5BF,IAAAA,MAAM,EAAE;AADoB,GAFJ,0BAK5B,eAL4B;AAMxBA,IAAAA,MAAM,EAAE;AANgB,KAOvBD,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAPuB,EAOQ;AAC5BF,IAAAA,MAAM,EAAE;AADoB,GAPR;AAAA,CAAd,CAAlB;AAaA,IAAMG,YAAY,GAAGT,MAAM,CAAC,KAAD,CAAN,CAAc;AAAA,MAAGK,KAAH,SAAGA,KAAH;AAAA,SAAgB;AAC/CK,IAAAA,MAAM,EAAE,OADuC;AAE/CC,IAAAA,OAAO,EAAE,MAFsC;AAG/CC,IAAAA,aAAa,EAAE,QAHgC;AAI/C,oBAAgB;AACZC,MAAAA,UAAU,iBAAUX,eAAe,CAACG,KAAK,CAACS,OAAN,CAAcC,OAAd,CAAsBC,IAAvB,CAAzB;AADE,KAJ+B;AAO/C,uBAAmB;AACfH,MAAAA,UAAU,iBAAUX,eAAe,CAACG,KAAK,CAACS,OAAN,CAAcG,SAAd,CAAwBD,IAAzB,CAAzB;AADK,KAP4B;AAU/C,uBAAmB;AACfN,MAAAA,MAAM,EAAE,MADO;AAEfQ,MAAAA,QAAQ,EAAE;AAFK,KAV4B;AAc/C,qBAAiB;AACbC,MAAAA,OAAO,EAAE,sBADI;AAEb,aAAO;AACHC,QAAAA,aAAa,EAAE;AADZ,OAFM;AAKb,gBAAU;AACNC,QAAAA,QAAQ,EAAE,iBADJ;AAENC,QAAAA,UAAU,EAAE;AAFN;AALG;AAd8B,GAAhB;AAAA,CAAd,CAArB;AA0BA,IAAMC,SAAS,GAAG/B,eAAe,CAACS,MAAD,CAAjC;AACA,IAAMuB,mBAAmB,GAAG/B,eAAe,CAACH,QAAD,CAA3C;KAAMkC,mB;AACN,IAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYpC,KAAZ,EAAmBqC,GAAnB,CAAuB,UAACC,GAAD;AAAA,SAAStC,KAAK,CAACsC,GAAD,CAAd;AAAA,CAAvB,CAAf;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACvB,kBAA4B5C,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAO6C,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAgC9C,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAO+C,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA0DhD,QAAQ,CAAC,KAAD,CAAlE;AAAA;AAAA,MAAOiD,qBAAP;AAAA,MAA8BC,wBAA9B;;AACA,MAAMC,kBAAkB,GAAGjD,MAAM,CAAC,IAAD,CAAjC;;AAEA,MAAMkD,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB1C,IAAAA,YAAY,GACP2C,IADL,CACU,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAb;AAAA,KADV,EAEKF,IAFL,CAEU,UAACR,MAAD,EAAY;AAAA;;AACdA,MAAAA,MAAM,cAAGA,MAAH,4CAAG,QAAQH,GAAR,CAAY,UAACc,CAAD;AAAA,+CACdA,CADc;AAEjBC,UAAAA,KAAK,EAAE,IAAIC,IAAJ,CAASF,CAAC,CAACC,KAAX,CAFU;AAGjBE,UAAAA,GAAG,EAAE,IAAID,IAAJ,CAASF,CAAC,CAACG,GAAX;AAHY;AAAA,OAAZ,CAAT;AAKAb,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KATL;AAUH,GAXD;;AAaA,MAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BV,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAE,IAAAA,cAAc;AACjB,GAHD;;AAIA,MAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/BC,IAAAA,iBAAiB,CAACD,KAAD,CAAjB;AACH,GAFD;;AAGA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACD,KAAD,EAAW;AACjCnD,IAAAA,WAAW,CAACmD,KAAD,CAAX,CAAmBT,IAAnB,CAAwB,YAAM;AAC1BD,MAAAA,cAAc;AACjB,KAFD;AAGH,GAJD;;AAKA,MAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,QAA0B;AAAA,QAAvBC,MAAuB,SAAvBA,MAAuB;AAAA,QAAZH,KAAY;;AACjD,QAAIG,MAAM,KAAK,aAAf,EAA8B;AAC1BjB,MAAAA,WAAW,CAACc,KAAD,CAAX;AACAZ,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACH;AACJ,GALD;;AAMA,MAAMgB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACJ,KAAD,EAAW;AACvCd,IAAAA,WAAW,CAACc,KAAD,CAAX;AACAZ,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACH,GAHD;;AAKAjD,EAAAA,SAAS,CAAC,YAAM;AACZmD,IAAAA,cAAc;AACjB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,aAAa,EAAE,CAAC;AAAEe,UAAAA,IAAI,EAAE;AAAR,SAAD;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aADJ,eAKI,QAAC,MAAD;AACI,MAAA,EAAE,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN,OADR;AAEI,MAAA,OAAO,EAAC,WAFZ;AAGI,MAAA,KAAK,EAAC,WAHV;AAII,MAAA,OAAO,EAAE;AAAA,eACLJ,kBAAkB,CAAC;AACfC,UAAAA,MAAM,EAAE,aADO;AAEfR,UAAAA,KAAK,EAAE,IAAIC,IAAJ,EAFQ;AAGfC,UAAAA,GAAG,EAAE,IAAID,IAAJ;AAHU,SAAD,CADb;AAAA,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,eAmBI,QAAC,YAAD;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,GAAG,EAAEP;AAAV;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,QAAC,mBAAD;AACI,QAAA,UAAU,MADd;AAEI,QAAA,SAAS,EAAEd,SAFf;AAGI,QAAA,MAAM,EAAEQ,MAHZ;AAII,QAAA,WAAW,EAAEgB,eAJjB;AAKI,QAAA,SAAS,MALb;AAMI,QAAA,aAAa,EAAEE,iBANnB;AAOI,QAAA,WAAW,EAAE1D,KAAK,CAACgE,KAPvB;AAQI,QAAA,WAAW,EAAE,IAAIX,IAAJ,EARjB;AASI,QAAA,aAAa,EAAC,OATlB;AAUI,QAAA,WAAW,EAAC,KAVhB;AAWI,QAAA,KAAK,EAAEnB,QAXX;AAYI,QAAA,IAAI,EAAE,EAZV;AAaI,QAAA,iBAAiB,MAbrB;AAcI,QAAA,UAAU,EAAE;AACR+B,UAAAA,OAAO,EAAE,iBAACC,KAAD,EAAW;AAChB,mBAAOpB,kBAAkB,CAACqB,OAAnB,gBACH/D,QAAQ,CAACgE,YAAT,eACI,QAAC,cAAD,oBAAoBF,KAApB;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEIpB,kBAAkB,CAACqB,OAFvB,CADG,gBAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANJ;AAQH;AAVO,SAdhB,CA0BI;AA1BJ;AA2BI,QAAA,aAAa,EAAE,uBAACV,KAAD,EAAW;AACtBI,UAAAA,uBAAuB,CAACJ,KAAD,CAAvB;AACH,SA7BL;AA8BI,QAAA,YAAY,EAAE,sBAACY,WAAD;AAAA,iBACVV,kBAAkB,CAACU,WAAD,CADR;AAAA;AA9BlB;AAAA;AAAA;AAAA;AAAA,eAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,aAnBJ,EAwDKzB,qBAAqB,iBAClB,QAAC,iBAAD;AACI,MAAA,WAAW,EAAEW,iBADjB;AAEI,MAAA,IAAI,EAAEX,qBAFV;AAGI,MAAA,KAAK,EAAEF;AAHX;AAAA;AAAA;AAAA;AAAA,aAzDR;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAkEH,CAhHD;;GAAMH,Y;;MAAAA,Y;AAkHN,eAAeA,YAAf","sourcesContent":["import 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Button } from '@mui/material'\r\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar'\r\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\r\nimport CalendarHeader from './CalendarHeader'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { getAllEvents, updateEvent } from './CalendarService'\r\nimport EventEditorDialog from './EventEditorDialog'\r\nimport { Box, styled } from '@mui/system'\r\nimport moment from 'moment'\r\nimport { convertHexToRGB } from 'app/utils/utils'\r\nimport Breadcrumb from 'app/components/Breadcrumb/Breadcrumb'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        margin: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst CalendarRoot = styled('div')(({ theme }) => ({\r\n    height: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    '& .rbc-event': {\r\n        background: `rgba(${convertHexToRGB(theme.palette.primary.main)},1)`,\r\n    },\r\n    '& .rbc-selected': {\r\n        background: `rgba(${convertHexToRGB(theme.palette.secondary.main)},1)`,\r\n    },\r\n    '& .rbc-calendar': {\r\n        height: 'auto',\r\n        flexGrow: 1,\r\n    },\r\n    '& .rbc-header': {\r\n        padding: '12px 16px !important',\r\n        '& a': {\r\n            paddingBottom: '8px !important',\r\n        },\r\n        '& span': {\r\n            fontSize: '15px !important',\r\n            fontWeight: 500,\r\n        },\r\n    },\r\n}))\r\n\r\nconst localizer = momentLocalizer(moment)\r\nconst DragAndDropCalendar = withDragAndDrop(Calendar)\r\nlet viewList = Object.keys(Views).map((key) => Views[key])\r\n\r\nconst MatxCalendar = () => {\r\n    const [events, setEvents] = useState([])\r\n    const [newEvent, setNewEvent] = useState(null)\r\n    const [shouldShowEventDialog, setShouldShowEventDialog] = useState(false)\r\n    const headerComponentRef = useRef(null)\r\n\r\n    const updateCalendar = () => {\r\n        getAllEvents()\r\n            .then((res) => res.data)\r\n            .then((events) => {\r\n                events = events?.map((e) => ({\r\n                    ...e,\r\n                    start: new Date(e.start),\r\n                    end: new Date(e.end),\r\n                }))\r\n                setEvents(events)\r\n            })\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldShowEventDialog(false)\r\n        updateCalendar()\r\n    }\r\n    const handleEventMove = (event) => {\r\n        handleEventResize(event)\r\n    }\r\n    const handleEventResize = (event) => {\r\n        updateEvent(event).then(() => {\r\n            updateCalendar()\r\n        })\r\n    }\r\n    const openNewEventDialog = ({ action, ...event }) => {\r\n        if (action === 'doubleClick') {\r\n            setNewEvent(event)\r\n            setShouldShowEventDialog(true)\r\n        }\r\n    }\r\n    const openExistingEventDialog = (event) => {\r\n        setNewEvent(event)\r\n        setShouldShowEventDialog(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateCalendar()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Calendar' }]} />\r\n            </div>\r\n\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() =>\r\n                    openNewEventDialog({\r\n                        action: 'doubleClick',\r\n                        start: new Date(),\r\n                        end: new Date(),\r\n                    })\r\n                }\r\n            >\r\n                Add Event\r\n            </Button>\r\n            <CalendarRoot>\r\n                <Box ref={headerComponentRef} />\r\n                <DragAndDropCalendar\r\n                    selectable\r\n                    localizer={localizer}\r\n                    events={events}\r\n                    onEventDrop={handleEventMove}\r\n                    resizable\r\n                    onEventResize={handleEventResize}\r\n                    defaultView={Views.MONTH}\r\n                    defaultDate={new Date()}\r\n                    startAccessor=\"start\"\r\n                    endAccessor=\"end\"\r\n                    views={viewList}\r\n                    step={60}\r\n                    showMultiDayTimes\r\n                    components={{\r\n                        toolbar: (props) => {\r\n                            return headerComponentRef.current ? (\r\n                                ReactDOM.createPortal(\r\n                                    <CalendarHeader {...props} />,\r\n                                    headerComponentRef.current\r\n                                )\r\n                            ) : (\r\n                                <div>Header component not found</div>\r\n                            )\r\n                        },\r\n                    }}\r\n                    // onNavigate={handleNavigate}\r\n                    onSelectEvent={(event) => {\r\n                        openExistingEventDialog(event)\r\n                    }}\r\n                    onSelectSlot={(slotDetails) =>\r\n                        openNewEventDialog(slotDetails)\r\n                    }\r\n                />\r\n            </CalendarRoot>\r\n            {shouldShowEventDialog && (\r\n                <EventEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={shouldShowEventDialog}\r\n                    event={newEvent}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MatxCalendar\r\n"]},"metadata":{},"sourceType":"module"}